board-filter.componentl.ts

import { Component, OnInit } from '@angular/core';
import { FormControl } from '@angular/forms';
import { UntilDestroy, untilDestroyed } from '@ngneat/until-destroy';
import { FilterQuery } from '@trungk18/project/state/filter/filter.query';
import { FilterService } from '@trungk18/project/state/filter/filter.service';
import { debounceTime, distinctUntilChanged } from 'rxjs/operators';
import { ProjectQuery } from '@trungk18/project/state/project/project.query';
import { JUser } from '@trungk18/interface/user';

@Component({
  selector: 'board-filter',
  templateUrl: './board-filter.component.html',
  styleUrls: ['./board-filter.component.scss']
})
@UntilDestroy()
export class BoardFilterComponent implements OnInit {
  searchControl: FormControl = new FormControl('');
  userIds: string[];


  constructor(
    public projectQuery: ProjectQuery,
    public filterQuery: FilterQuery,
    public filterService: FilterService
  ) {
    this.userIds = [];
  }

  ngOnInit(): void {
    this.searchControl.valueChanges
      .pipe(debounceTime(100), distinctUntilChanged(), untilDestroyed(this))
      .subscribe((term) => {
        this.filterService.updateSearchTerm(term);
      });

    this.filterQuery.userIds$.pipe(untilDestroyed(this)).subscribe((userIds) => {
      this.userIds = userIds;
    });
  }

  isUserSelected(user: JUser) {
    return this.userIds.includes(user.id);
  }

  ignoreResolvedChanged() {
    this.filterService.toggleIgnoreResolve();
  }

  onlyMyIssueChanged() {
    this.filterService.toggleOnlyMyIssue();
  }

  userChanged(user: JUser) {
    this.filterService.toggleUserId(user.id);
  }

  resetAll() {
    this.searchControl.setValue('');
    this.filterService.resetAll();
  }
}

board-filter.html

<div class="flex items-center mt-6">
    <form class="w-40 mr-4">
        <j-input aria-label="search"
                 icon="search"                 
                 [control]="searchControl">
        </j-input>
    </form>
    <div class="flex flex-row mr-3">
        <div *ngFor="let user of projectQuery.users$ | async"
             class="lift-avatar"
             nz-tooltip
             [nzTooltipPlacement]="'bottom'"
             [class.is-active]="isUserSelected(user)"
             [nzTooltipTitle]="user.name">
            <j-avatar class="flex"
                      className="select-none shadow-outline-white"
                      [avatarUrl]="user.avatarUrl"
                      [size]="36"
                      (click)="userChanged(user)">
            </j-avatar>
        </div>
    </div>
    <j-button class="ml-3"
              className="btn-empty"
              [isActive]="filterQuery.onlyMyIssue$ | async"
              (click)="onlyMyIssueChanged()">
        Only My Issues
    </j-button>
    <j-button class="ml-3"
              [isActive]="filterQuery.ignoreResolve$ | async"
              (click)="ignoreResolvedChanged()"
              className="btn-empty">
        Ignore Resolved
    </j-button>
    <div class="ml-3 flex items-center"
         *ngIf="filterQuery.any$ | async">
        <div class="mr-3 w-px bg-backgroundMedium self-stretch"></div>
        <j-button [className]="'btn-secondary'"
                  (click)="resetAll()">Clear all
        </j-button>
    </div>
</div>

filter.service

import { Injectable } from '@angular/core';
import { FilterStore, createInitialFilterState } from './filter.store';

@Injectable({
  providedIn: 'root'
})
export class FilterService {
  constructor(private store: FilterStore) {}

  updateSearchTerm(searchTerm: string) {
    this.store.update({
      searchTerm
    });
  }

  toggleUserId(userId: string) {
    this.store.update((state) => {
      const hasUser = state.userIds.includes(userId);
      const userIds = hasUser
        ? state.userIds.filter((x) => x !== userId)
        : [...state.userIds, userId];
      return {
        ...state,
        userIds
      };
    });
  }

  toggleOnlyMyIssue() {
    this.store.update((state) => {
      const onlyMyIssue = !state.onlyMyIssue;
      return {
        ...state,
        onlyMyIssue
      };
    });
  }

  toggleIgnoreResolve() {
    this.store.update((state) => {
      const ignoreResolved = !state.ignoreResolved;
      return {
        ...state,
        ignoreResolved
      };
    });
  }

  resetAll() {
    this.store.update((state) => ({
      ...state,
      ...createInitialFilterState()
    }));
  }
}


filter.store

import { Injectable } from '@angular/core';
import { Store, StoreConfig } from '@datorama/akita';

export interface FilterState {
  searchTerm: string;
  userIds: string[];
  onlyMyIssue: boolean;
  ignoreResolved: boolean;
}

export function createInitialFilterState(): FilterState {
  return {
    searchTerm: '',
    userIds: [],
    onlyMyIssue: false,
    ignoreResolved: false
  };
}

@Injectable({
  providedIn: 'root'
})
@StoreConfig({
  name: 'filter'
})
export class FilterStore extends Store<FilterState> {
  constructor() {
    super(createInitialFilterState());
  }
}

filter.query

import { Injectable } from '@angular/core';
import { Query } from '@datorama/akita';
import { FilterStore, FilterState } from './filter.store';

@Injectable({ providedIn: 'root' })
export class FilterQuery extends Query<FilterState> {
  any$ = this.select(
    ({ searchTerm, userIds, onlyMyIssue, ignoreResolved }) =>
      !!searchTerm || !!userIds?.length || onlyMyIssue || ignoreResolved
  );
  all$ = this.select();
  userIds$ = this.select('userIds');
  onlyMyIssue$ = this.select('onlyMyIssue');
  ignoreResolve$ = this.select('ignoreResolved');

  constructor(protected store: FilterStore) {
    super(store);
  }
}
explain this code with in deep
