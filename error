login component

import { Component } from '@angular/core';
import { DatabaseService } from '../database.service';
import { Router } from '@angular/router';
import { Select, Store } from '@ngxs/store';
import { LoginAction } from '../store/actions/login.action';
import { Observable, first } from 'rxjs';
import { LoginState } from '../store/state/login.state';

@Component({
  selector: 'app-login',
  templateUrl: './login.component.html',
  styleUrls: ['./login.component.css']
})
export class LoginComponent {

  constructor(private databaseservice: DatabaseService, private router: Router, private store: Store) {

  }
  @Select(LoginState.loginlist) login$: Observable<boolean>;
  @Select(LoginState.loaded) loaded$: Observable<boolean>;
  @Select(LoginState.payload) payload$: Observable<{ username: string, userpassword: string }>;
  @Select(LoginState.userid) userid$: Observable<number>;

  username: string = "";
  password: string = "";

  onlogin() {
    // console.log("clicked");

    this.loaded$.pipe(first()).subscribe(res => {
      console.log("clicked");

      if (!res) {

        this.store.dispatch(new LoginAction({ username: this.username, userpassword: this.password })).subscribe((res: any) => {
          // console.log(res.login.sucess);
          if (res.login.sucess == true) {


            this.databaseservice.getall(res.login.userid).subscribe((res1: any) => {
               console.log("daTA FROM login component",res1);
               this.databaseservice.raiseemit(res1.getall);
              this.databaseservice.getdata = res1.getall;
              console.log("daTA FROM login componentthis if ",this.databaseservice.getdata);
              
            })

            localStorage.setItem('isloggin', 'true');
            this.router.navigateByUrl('/main');
            localStorage.setItem("userid", res.login.userid);

          }

          
          else {
            this.router.navigateByUrl('/register');
          }
        });
      } else {

        this.payload$.pipe(first()).subscribe(res => {
          if (res.username == this.username && res.userpassword == this.password) {
            this.loaded$.pipe(first()).subscribe(res => {
              if (res == true) {
                this.userid$.pipe(first()).subscribe(res => {
                  this.databaseservice.getall(res).subscribe((res1: any) => {
                    //  console.log(res1.getall);
                    this.databaseservice.raiseemit(res1.getall);
                    this.databaseservice.getdata = res1.getall;
                    console.log(this.databaseservice.getdata);
                    
                    localStorage.setItem('isloggin', 'true');
                    this.router.navigateByUrl('/main');

                  })
                  localStorage.setItem("userid", res.toString());
                })
              }
            }
            )
          } else {
            this.store.dispatch(new LoginAction({ username: this.username, userpassword: this.password })).subscribe((res: any) => {
              console.log(res.login.sucess);
              if (res.login.sucess == true) {


                this.databaseservice.getall(res.login.userid).subscribe((res1: any) => {
                  //  console.log(res1.getall);
                  this.databaseservice.getdata = res1.getall;
                  // console.log(this.databaseservice.getdata);
                  this.databaseservice.raiseemit(res1.getall);
                })

                localStorage.setItem('isloggin', 'true');


              }

              
              else {
                this.router.navigateByUrl('/register');
              }
            });
          }
        })


      }

    })



    //     this.databaseservice.login_user(this.username, this.password).subscribe((res: any) => {
    //       console.log(res);
    //       if(res.isSuccess==true){


    //       this.databaseservice.getall(res.userid).subscribe((res1:any)=>{
    //       //  console.log(res1.getall);
    //       this.databaseservice.getdata=res1.getall;
    //       // console.log(this.databaseservice.getdata);
    //       this.databaseservice.raiseemit(res1.getall);
    //       })

    // localStorage.setItem('isloggin','true');


    //         }

    //       if (res.isSuccess) {
    //         this.router.navigateByUrl('/main');
    //       localStorage.setItem("userid",res.userid);

    //       }
    //       else {
    //         this.router.navigateByUrl('/register');
    //       }
    //     });



  }
}
login.action

     export class LoginAction{
        static readonly type='[Login] login';
        constructor(public payload:{ username:string, userpassword:string}){}
     }   
     
     login state
     import { Injectable } from "@angular/core";
import { Action, Selector, State, StateContext } from "@ngxs/store";
import { LoginAction } from "../actions/login.action";
import { DatabaseService } from "src/app/database.service";
import { tap } from "rxjs";
import { state } from "@angular/animations";

export class LoginStateModel{
     sucess:boolean;
     loaded:boolean;
     userid:number;
     payload:{ username:string, userpassword:string}
}

@State<LoginStateModel>({
    name:'login',
    defaults:{
       sucess:false,
       loaded:false,
       userid:0,
       payload:{ username:'', userpassword:''}
    }
})

@Injectable()
export class LoginState{
    constructor(private databaseservice:DatabaseService){

    }
       @Selector()
       static loginlist(state:LoginStateModel){
return state.sucess;
}

@Selector()
       static loaded(state:LoginStateModel){
return state.loaded;}

@Selector()
static payload(state:LoginStateModel){
    return state.payload;
}
    
@Selector()
static userid(state:LoginStateModel){
    return state.userid;
}
       @Action(LoginAction)
       loginaction({getState,setState}:StateContext<LoginStateModel>,{payload}:LoginAction){
        const {username,userpassword}=payload;
return this.databaseservice.login_user(username,userpassword).pipe(tap((res:any)=>{
const state=getState();
setState({
    ...state,
sucess:res.isSuccess,
loaded:true,
userid:res.userid,
payload:{username:username,userpassword:userpassword}
})
    
}));
   

}      
}

