typing ts

import { AfterViewInit, Component, DoCheck, ElementRef, HostListener, OnInit, ViewChild } from '@angular/core';
import { ParagraphService } from '../paragraph.service';

@Component({
  selector: 'app-typing',
  templateUrl: './typing.component.html',
  styleUrls: ['./typing.component.css']
})
export class TypingComponent implements AfterViewInit {
  @ViewChild('paragraph') myDiv!: ElementRef;
  @ViewChild('cursorelement') cursorelement!: ElementRef;
  @ViewChild('refresh') refresh!: ElementRef;
  @ViewChild('timerdiv') timerdiv!: ElementRef;
  @ViewChild('result_main') result!: ElementRef;
  constructor(private paragraphService: ParagraphService) {

  }
  ngDoCheck(): void {
    this.timer=this.paragraphService.timer;
    this.const_timer=this.paragraphService.timer;
  }
  

  divs: number[] = [];
  i: number = 0;
  j: number = 0;
  wordl: number = 0;
  paragraph: String = '';
  count: number = 0;
  shift: boolean = false;
  timer: number = 0; // Time in seconds
  const_timer:number=0;
  timerId: any;
  timerstart:boolean=true;
  correctword:number=0;
  incorrectword:number=0;
  
  speed:number=0;
  accuracy:number=0;


  startTimer() {
    this.timer=this.paragraphService.timer;
    this.const_timer=this.paragraphService.timer;
    this.i = 0;
    this.j = 0;
    this.count = 0;
    this.correctword=0;
    this.incorrectword=0;
    this.timerId = setInterval(() => {
      this.timer--;
  console.log("timer decrease");
  console.log(this.timer);
  
      if (this.timer === 0) {
        console.log("timer stopped");
        
        this.stopTimer();
        const divElement: HTMLDivElement = this.myDiv.nativeElement;
        const timerdiv: HTMLDivElement = this.timerdiv.nativeElement;
        const refresh: HTMLDivElement = this.refresh.nativeElement;
        const cursorelement:HTMLDivElement=this.cursorelement.nativeElement;
        divElement.blur();
        divElement.style.visibility='hidden';
        timerdiv.style.visibility='hidden';
        refresh.style.visibility='hidden';
        cursorelement.style.visibility='hidden'
        const result:HTMLDivElement=this.result.nativeElement;
        result.style.visibility='visible';

      }
    }, 1000);
  }
  
  stopTimer() {
    clearInterval(this.timerId);
    // Handle timer completion or other actions
  
  }
  

  ngAfterViewInit(): void {
   
    this.paragraph = this.paragraphService.data[Math.floor(Math.random() * this.paragraphService.data.length)];
    this.splitParagraph();
    const divElement: HTMLDivElement = this.myDiv.nativeElement;
    const childCount: number = divElement.children.length;
    for (let i = 0; i < childCount; i++) {
      this.divs[i] = divElement.children[i].children.length;
    }
    // console.log(this.divs);
    divElement.focus();
   
  }


  splitParagraph() {
    const divElement: HTMLDivElement = this.myDiv.nativeElement;
    const words: string[] = this.paragraph.split(' ');

    for (let i = 0; i < words.length; i++) {
      const wordDiv = document.createElement('div');
      const word = words[i];

      for (let j = 0; j < word.length; j++) {
        const letterSpan = document.createElement('span');
        letterSpan.textContent = word[j];
        wordDiv.appendChild(letterSpan);
      }

      divElement.appendChild(wordDiv);
    }
  }


  onclick() {
    const divElement: HTMLDivElement = this.myDiv.nativeElement;
    divElement.textContent = '';
    this.paragraph = this.paragraphService.data[Math.floor(Math.random() * this.paragraphService.data.length)];
    
    this.splitParagraph();
   
  
    divElement: HTMLDivElement = this.myDiv.nativeElement;
    const childCount: number = divElement.children.length;
    for (let i = 0; i < childCount; i++) {
      this.divs[i] = divElement.children[i].children.length;
    }
    const cursorelement: HTMLElement = this.cursorelement.nativeElement;
    cursorelement.removeAttribute('style');
    // divElement.focus();
    // cursorelement.style.left = '27px';
    // cursorelement.style.top = '12px';
  
    divElement.focus();
    
if(!this.timerstart){
  this.stopTimer();
  this.timerstart=true;
 this.timer=15;
 this.const_timer=15;
}

  }

  onclick2(){
    const divElement: HTMLDivElement = this.myDiv.nativeElement;
    const timerdiv: HTMLDivElement = this.timerdiv.nativeElement;
    const refresh: HTMLDivElement = this.refresh.nativeElement;
    const cursorelement:HTMLDivElement=this.cursorelement.nativeElement;
    
        divElement.style.visibility='visible';
        timerdiv.style.visibility='visible';
        refresh.style.visibility='visible';
        cursorelement.style.visibility='visible'
        const result:HTMLDivElement=this.result.nativeElement;
        result.style.visibility='hidden';
        this.onclick();
  }

  shiftdown(event: any) {
    this.shift = event;
  }
  shiftup(event: any) {
    this.shift = event;
  }


  keydown(e: KeyboardEvent) {
    if(this.timerstart){
    console.log("timer start")
    this.startTimer();
  this.timerstart=false;}
    // console.log(e.keyCode);
    if (e.keyCode == 16) {
      return
    }
    const divElement: HTMLDivElement = this.myDiv.nativeElement;
    this.wordl = this.divs[this.i];


    if (this.wordl != this.j) {
      console.log("first if");

     


      //  const enteredletter=this.shift?e.key.toUpperCase():e.key;
      if (e.key == divElement.children[this.i].children[this.j].textContent) {
        console.log("second if");

        // console.log(e.key);
        // console.log(divElement.children[this.i].children[this.j].textContent);
        divElement.children[this.i].children[this.j].classList.add('sucess');
        const letterelement: HTMLElement = divElement.children[this.i].children[this.j] as HTMLElement;
        // console.log(letterelement);

        const cursorelement: HTMLElement = this.cursorelement.nativeElement;
        cursorelement.style.left = letterelement.offsetLeft + letterelement.offsetWidth + 'px';
      } else if (e.keyCode == 8) {
        console.log("second else if");
        console.log(this.j);

        if (this.j != 0) {
          this.j--;
          divElement.children[this.i].children[this.j].classList.remove('sucess');
          divElement.children[this.i].children[this.j].classList.remove('error');
          const letterelement: HTMLElement = divElement.children[this.i].children[this.j] as HTMLElement;
          // console.log(letterelement);

          const cursorelement: HTMLElement = this.cursorelement.nativeElement;
          cursorelement.style.left = letterelement.offsetLeft + 'px';
          this.j--;
        } else {
          this.j--;
        }
      }
      else {
        console.log("else");

        // console.log(e.key);
        // console.log(divElement.children[this.i].children[this.j].textContent);
        divElement.children[this.i].children[this.j].classList.add('error');
        const letterelement: HTMLElement = divElement.children[this.i].children[this.j] as HTMLElement;
        // console.log(letterelement);

        const cursorelement: HTMLElement = this.cursorelement.nativeElement;
        cursorelement.style.left = letterelement.offsetLeft + letterelement.offsetWidth + 'px';
      }
      this.j++;
    }
    else if (e.keyCode == 32) {
      // console.log(e.keyCode);
      this.i++;
      this.count = 0;
      this.j = 0;

   if(   divElement.children[this.i - 1].querySelectorAll(".error").length==0){
    this.correctword++;
    console.log("correctword",this.correctword);
    
   }else{
    this.incorrectword++;
    console.log("incorrectword",this.incorrectword);
    
   }
    
   const first: HTMLElement = divElement.children[this.i - 1] as HTMLElement;
      const second: HTMLElement = divElement.children[this.i] as HTMLElement;

      if (first.offsetTop == second.offsetTop) {
        // console.log("spacebar");
        const letterelement: HTMLElement = divElement.children[this.i].children[this.j] as HTMLElement;
        console.log(letterelement);

        const cursorelement: HTMLElement = this.cursorelement.nativeElement;
        cursorelement.style.left = letterelement.offsetLeft + 'px';
      }
      else {
        const letterelement: HTMLElement = divElement.children[this.i].children[this.j] as HTMLElement;
        console.log(letterelement);

        const cursorelement: HTMLElement = this.cursorelement.nativeElement;
        cursorelement.style.left = letterelement.offsetLeft + 'px';
        cursorelement.style.top = letterelement.offsetTop + 10 + 'px';
      }

    } else if (e.keyCode == 8 && this.count == 0) {
      console.log("first 2 else if");

      const letterelement: HTMLElement = divElement.children[this.i].children[this.j + this.count - 1] as HTMLElement;
      console.log(letterelement);

      const cursorelement: HTMLElement = this.cursorelement.nativeElement;
      cursorelement.style.left = letterelement.offsetLeft + 'px';

      this.j--;

      divElement.children[this.i].children[this.j].classList.remove('sucess');
      divElement.children[this.i].children[this.j].classList.remove('error');

    } else if (e.keyCode == 8 && this.count != 0) {

      var parent = divElement.children[this.i];
      if (parent != null) {
        var last = parent.lastChild;
        if (last != null) {
          console.log(this.i);
          console.log(this.j);
          console.log(this.count);


          const letterelement: HTMLElement = divElement.children[this.i].children[this.j + this.count - 1] as HTMLElement;
          console.log(letterelement);

          const cursorelement: HTMLElement = this.cursorelement.nativeElement;
          cursorelement.style.left = letterelement.offsetLeft + 'px';
          parent.removeChild(last);
          this.count--;
      // new
      if(this.i!=0){
      
      
        
        const letterelement: HTMLElement = divElement.children[this.i].children[this.j+this.count - 1] as HTMLElement;


        const cursorelement: HTMLElement = this.cursorelement.nativeElement;
        cursorelement.style.left = letterelement.offsetLeft+letterelement.offsetWidth + 'px';
        cursorelement.style.top = letterelement.offsetTop +10 + 'px';
      
    }

        }
      }

    }
    else {
      console.log("first else");

      // console.log(e.keyCode);

      divElement.children[this.i].innerHTML += '<span class="error">' + e.key + '</span>';
      // this.j++;

      console.log(e.key);

      this.count++;
      const letterelement: HTMLElement = divElement.children[this.i].children[this.j + this.count - 1] as HTMLElement;
      console.log(letterelement);

      // const cursorelement: HTMLElement = this.cursorelement.nativeElement;
      // cursorelement.style.left = letterelement.offsetLeft + letterelement.offsetWidth + 'px'; 
      const first: HTMLElement = divElement.children[this.i - 1] as HTMLElement;
      const second: HTMLElement = divElement.children[this.i] as HTMLElement;
      // console.log(first);
      // console.log(second);
if(this.i!=0){
      if (first.offsetTop == second.offsetTop) {
        // console.log("spacebar");
        // console.log("1");
        
        const letterelement: HTMLElement = divElement.children[this.i].children[this.j+this.count - 1] as HTMLElement;
        console.log(letterelement);

        const cursorelement: HTMLElement = this.cursorelement.nativeElement;
        cursorelement.style.left = letterelement.offsetLeft +letterelement.offsetWidth+ 'px';
      }
      else {
        // console.log("2");
        
        const letterelement: HTMLElement = divElement.children[this.i].children[this.j+this.count - 1] as HTMLElement;
        console.log(letterelement);

        const cursorelement: HTMLElement = this.cursorelement.nativeElement;
        cursorelement.style.left = letterelement.offsetLeft+letterelement.offsetWidth + 'px';
        cursorelement.style.top = letterelement.offsetTop + 10 + 'px';
      }
    }
  else{
    const letterelement: HTMLElement = divElement.children[this.i].children[this.j+this.count - 1] as HTMLElement;
        console.log(letterelement);

        const cursorelement: HTMLElement = this.cursorelement.nativeElement;
        cursorelement.style.left = letterelement.offsetLeft +letterelement.offsetWidth+ 'px';
  }}
    // console.log(j);
    // this.shift=false;
  }
}
why timer value not decreasing
