typing.html

<div style="position: relative;">
<div id="paragraph" (keyup)="keyup($event)" tabindex="5" #paragraph>
   
</div>
<span id="cursor"></span>
</div>
<div id="refresh" class="refresh"><button style="font-size: 20px;" (click)="onclick()">refresh</button></div>

typing.css

#paragraph{
    display: flex;
    width:100%;
   flex-wrap: wrap;
   margin:30px;
   outline: none;
}
:host /deep/ #paragraph div{
    font-size: 50px;
    margin-right: 10px;
   
}
:host /deep/.sucess{
    color: greenyellow ;
}
:host /deep/.error{
    color: tomato ;
}
#refresh{
    text-align: center;
    
}
#cursor{
    position: absolute;
    background-color: blue;
    height: 38px;
    width: 2px;
    top:12px;
    left:27px;
    /* color: blue; */
    animation: blink 0.7s infinite;
}
@keyframes blink{
    0%{
        opacity: 1;
    }
    50%{
        opacity: 0;
    }
    100%{
        opacity: 1;
    }
}

typing.ts

import { AfterViewInit, Component, ElementRef, OnInit, ViewChild } from '@angular/core';
import { ParagraphService } from '../paragraph.service';

@Component({
  selector: 'app-typing',
  templateUrl: './typing.component.html',
  styleUrls: ['./typing.component.css']
})
export class TypingComponent implements AfterViewInit {
  @ViewChild('paragraph') myDiv!: ElementRef;
  @ViewChild('cursorelement') cursorelement!: ElementRef;
  constructor(private paragraphService: ParagraphService) {

  }

  divs: number[] = [];
  i: number = 0;
  j: number = 0;
  wordl: number = 0;
  paragraph: String = '';
  count: number = 0;
  shift:boolean=false;

  ngAfterViewInit(): void {
    this.paragraph = this.paragraphService.data[Math.floor(Math.random() * this.paragraphService.data.length)];
    this.splitParagraph();
    const divElement: HTMLDivElement = this.myDiv.nativeElement;
    const childCount: number = divElement.children.length;
    for (let i = 0; i < childCount; i++) {
      this.divs[i] = divElement.children[i].children.length;
    }
    // console.log(this.divs);
    divElement.focus();
  }


  splitParagraph() {
    const divElement: HTMLDivElement = this.myDiv.nativeElement;
    const words: string[] = this.paragraph.split(' ');

    for (let i = 0; i < words.length; i++) {
      const wordDiv = document.createElement('div');
      const word = words[i];

      for (let j = 0; j < word.length; j++) {
        const letterSpan = document.createElement('span');
        letterSpan.textContent = word[j];
        wordDiv.appendChild(letterSpan);
      }

      divElement.appendChild(wordDiv);
    }
  }


  onclick() {
    const divElement: HTMLDivElement = this.myDiv.nativeElement;
    divElement.textContent = '';
    this.paragraph = this.paragraphService.data[Math.floor(Math.random() * this.paragraphService.data.length)];
    this.splitParagraph();
    divElement: HTMLDivElement = this.myDiv.nativeElement;
    const childCount: number = divElement.children.length;
    for (let i = 0; i < childCount; i++) {
      this.divs[i] = divElement.children[i].children.length;
    }
    const cursorelement: HTMLElement = this.cursorelement.nativeElement;
    cursorelement.removeAttribute('style');

  }


  keyup(e: KeyboardEvent) {
    // console.log(e.key);
    const divElement: HTMLDivElement = this.myDiv.nativeElement;
    this.wordl = this.divs[this.i];
    // if (this.j < this.wordl) {
    //   const letterelement: HTMLElement = divElement.children[this.i].children[this.j] as HTMLElement;
    //   console.log(letterelement);

    //   const cursorelement: HTMLElement = this.cursorelement.nativeElement;
    //   cursorelement.style.left = letterelement.offsetLeft + letterelement.offsetWidth + 'px';
    // }

    if (this.wordl != this.j) {
      console.log("first if");

      // console.log(this.wordl);
      // console.log(this.j);
      // console.log(e.keyCode);

      if (e.key == divElement.children[this.i].children[this.j].textContent) {
        console.log("second if");

        // console.log(e.key);
        // console.log(divElement.children[this.i].children[this.j].textContent);
        divElement.children[this.i].children[this.j].classList.add('sucess');
        const letterelement: HTMLElement = divElement.children[this.i].children[this.j] as HTMLElement;
        // console.log(letterelement);

        const cursorelement: HTMLElement = this.cursorelement.nativeElement;
        cursorelement.style.left = letterelement.offsetLeft + letterelement.offsetWidth + 'px';
      } else if (e.keyCode == 8) {
        console.log("second else if");
        console.log(this.j);

        if (this.j != 0) {
          this.j--;
          divElement.children[this.i].children[this.j].classList.remove('sucess');
          divElement.children[this.i].children[this.j].classList.remove('error');
          const letterelement: HTMLElement = divElement.children[this.i].children[this.j] as HTMLElement;
          // console.log(letterelement);

          const cursorelement: HTMLElement = this.cursorelement.nativeElement;
          cursorelement.style.left = letterelement.offsetLeft + 'px';
          this.j--;
        } else {
          this.j--;
        }
      }
      else {
        console.log("else");

        // console.log(e.key);
        // console.log(divElement.children[this.i].children[this.j].textContent);
        divElement.children[this.i].children[this.j].classList.add('error');
        const letterelement: HTMLElement = divElement.children[this.i].children[this.j] as HTMLElement;
        // console.log(letterelement);

        const cursorelement: HTMLElement = this.cursorelement.nativeElement;
        cursorelement.style.left = letterelement.offsetLeft + letterelement.offsetWidth + 'px';
      }
      this.j++;
    }
    else if (e.keyCode == 32) {
      // console.log(e.keyCode);
      console.log("first 1 else if");
      this.i++;
      this.count = 0;
      this.j = 0;
      // console.log("spacebar");
      const letterelement: HTMLElement = divElement.children[this.i].children[this.j] as HTMLElement;
      console.log(letterelement);

      const cursorelement: HTMLElement = this.cursorelement.nativeElement;
      cursorelement.style.left = letterelement.offsetLeft + 'px';

    } else if (e.keyCode == 8 && this.count == 0) {
      console.log("first 2 else if");

      const letterelement: HTMLElement = divElement.children[this.i].children[this.j + this.count - 1] as HTMLElement;
      console.log(letterelement);

      const cursorelement: HTMLElement = this.cursorelement.nativeElement;
      cursorelement.style.left = letterelement.offsetLeft + 'px';

      this.j--;

      divElement.children[this.i].children[this.j].classList.remove('sucess');


    } else if (e.keyCode == 8 && this.count != 0) {

      var parent = divElement.children[this.i];
      if (parent != null) {
        var last = parent.lastChild;
        if (last != null) {
          console.log(this.i);
          console.log(this.j);
          console.log(this.count);


          const letterelement: HTMLElement = divElement.children[this.i].children[this.j + this.count - 1] as HTMLElement;
          console.log(letterelement);

          const cursorelement: HTMLElement = this.cursorelement.nativeElement;
          cursorelement.style.left = letterelement.offsetLeft + 'px';
          parent.removeChild(last);
          this.count--;

        }
      }

    }
    else {
      console.log("first else");

      // console.log(e.keyCode);

      divElement.children[this.i].innerHTML += '<span class="error">' + e.key + '</span>';
      // this.j++;

      console.log(e.key);

      this.count++;
      const letterelement: HTMLElement = divElement.children[this.i].children[this.j + this.count - 1] as HTMLElement;
      console.log(letterelement);

      const cursorelement: HTMLElement = this.cursorelement.nativeElement;
      cursorelement.style.left = letterelement.offsetLeft + letterelement.offsetWidth + 'px';
    }
    // console.log(j);

  }
}
this work good but in this i cant enter capital character right because when i use shift key it use it as one key event and cursor move ahead
