app.html


<div class="items-wrapper">
    <app-card *ngFor="let item of visibleItems.items" [item]="item"></app-card>
  </div>
  
  <div class="pagination-wrapper">
    <app-pagination [page]="page" [pageSize]="pageSize" [total]="visibleItems.total" #PaginationComponent></app-pagination>
  
    
  </div>


app.ts

import { Component, OnInit, ViewChild } from '@angular/core';
import { FormControl } from '@angular/forms';
import { Subscription } from 'rxjs';
import { PaginationComponent } from './pagination/pagination.component';

export interface PaginatedResponse<T> {
  items: T[];
  total: number;
}

@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.css']
})
export class AppComponent implements OnInit  {
  @ViewChild('PaginationComponent') PaginationComponent!:PaginationComponent;
 
  private pagesub!:Subscription;
  private pagesizesub!:Subscription;
  
  
  ngOnInit(): void {
   
    this.PaginationComponent.page$.subscribe(data=>{
      this.page=data;
    });
    this.PaginationComponent.pageSize$.subscribe(data=>{
      this.pageSize=data;
    });
    // console.log(this.page,this.pageSize);
    
  }

  page:number=1;
  pageSize:number=10;
  private readonly items = Array.from(Array(100).keys(), (item) => item + 1);

  public visibleItems: PaginatedResponse<number> = {
    items: this.items.slice(0, 10),
    total: this.items.length,
  };

  public onPageChange(): void {
    const startIndex = (this.page - 1) * this.pageSize;

    const items = this.items.slice(
      startIndex,
      startIndex + this.pageSize
    );

    this.visibleItems = { items, total: this.items.length };
  }
}

pagination.html

<div class="pagination">
    <button [disabled]="page === 1" (click)="selectPage(1)"><<</button>
    <button [disabled]="page === 1" (click)="selectPage(page - 1)">
      <
    </button>
    <button
      *ngFor="let page of visiblePages"
      
      (click)="selectPage(page)"
    >
      {{ page }}
    </button>
    <button
      [disabled]="page === totalPages"
      (click)="selectPage(page + 1)"
    >
      >
    </button>
    <button
      [disabled]="page === totalPages"
      (click)="selectPage(totalPages)"
    >
      >>
    </button>
  </div>
  
  <select [ngModel]="pageSize" (ngModelChange)="selectPageSize($event)">
    <option *ngFor="let size of pageSizes" [value]="size">{{ size }}</option>
  </select>

pagination.ts 

import { Component, Input, OnChanges, OnInit, SimpleChanges } from '@angular/core';
import { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';
import { BehaviorSubject, Subject } from 'rxjs';


@Component({
  selector: 'app-pagination',
  templateUrl: './pagination.component.html',
  styleUrls: ['./pagination.component.css']
})
export class PaginationComponent implements OnInit
  
{
  @Input() total = 100;
  @Input() page = 1;
  @Input() pageSize = 10;

  public total$=new BehaviorSubject(100);
  public page$=new BehaviorSubject(1);
  public pageSize$=new BehaviorSubject(10);

  public totalPages!: number;
  public visiblePages!: number[];
  public visibleRangeLength:number=5;
  pageSizes: number[] = [5, 10, 25, 50];

  ngOnInit(): void {
    this.updateTotalPages();
    this.updateVisiblePages();
  }

  public selectPage(page: number): void {
   this.page=page;
   this.page$.next(this.page);
    this.updateVisiblePages();
    
  }

  public selectPageSize(pageSize: string): void {
   this.pageSize=+pageSize;
   this.pageSize$.next(this.pageSize);
    this.updateTotalPages();
    this.updateVisiblePages();
    
  }

  private updateVisiblePages(): void {
    const length = Math.min(this.totalPages, this.visibleRangeLength);


    const startIndex = Math.max(
      Math.min(
        this.page - Math.ceil(length / 2),
        this.totalPages - length
      ),
      0
    );

    this.visiblePages = Array.from(
      new Array(length).keys(),
      (item) => item + startIndex + 1
    );
  }

  private updateTotalPages(): void {
    this.totalPages = Math.ceil(this.total / this.pageSize);
  }
}




   ERROR TypeError: Cannot read properties of undefined (reading 'page$')
    at AppComponent.ngOnInit (app.component.ts:25:30)
    at callHook (core.mjs:2434:22)
    at callHooks (core.mjs:2403:17)
    at executeInitAndCheckHooks (core.mjs:2354:9)
    at refreshView (core.mjs:10341:21)
    at detectChangesInternal (core.mjs:11529:9)
    at RootViewRef.detectChanges (core.mjs:12020:9)
    at ApplicationRef.tick (core.mjs:25310:22)
    at ApplicationRef._loadComponent (core.mjs:25348:14)
    at ApplicationRef.bootstrap 

