this is the error
main.cpp: In function ‘std::string temp(int)’:
main.cpp:55:33: error: no matching function for call to ‘std::vector::push_back(std::string)’
   55 |               current.push_back (to_string (count));
      |               ~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~
In file included from /usr/include/c++/11/vector:67,
                 from main.cpp:10:
/usr/include/c++/11/bits/stl_vector.h:1187:7: note: candidate: ‘void std::vector<_Tp, _Alloc>::push_back(const value_type&) [with _Tp = char; _Alloc = std::allocator; std::vector<_Tp, _Alloc>::value_type = char]’
 1187 |       push_back(const value_type& __x)
      |       ^~~~~~~~~
/usr/include/c++/11/bits/stl_vector.h:1187:35: note:   no known conversion for argument 1 from ‘std::string’ {aka ‘std::__cxx11::basic_string’} to ‘const value_type&’ {aka ‘const char&’}
 1187 |       push_back(const value_type& __x)
      |                 ~~~~~~~~~~~~~~~~~~^~~
/usr/include/c++/11/bits/stl_vector.h:1203:7: note: candidate: ‘void std::vector<_Tp, _Alloc>::push_back(std::vector<_Tp, _Alloc>::value_type&&) [with _Tp = char; _Alloc = std::allocator; std::vector<_Tp, _Alloc>::value_type = char]’
 1203 |       push_back(value_type&& __x)
      |       ^~~~~~~~~
/usr/include/c++/11/bits/stl_vector.h:1203:30: note:   no known conversion for argument 1 from ‘std::string’ {aka ‘std::__cxx11::basic_string’} to ‘std::vector::value_type&&’ {aka ‘char&&’}
 1203 |       push_back(value_type&& __x)
      |                 ~~~~~~~~~~~~~^~~
main.cpp:62:27: error: no matching function for call to ‘std::vector::push_back(std::string)’
   62 |         current.push_back (to_string (count));
      |         ~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~
In file included from /usr/include/c++/11/vector:67,
                 from main.cpp:10:
/usr/include/c++/11/bits/stl_vector.h:1187:7: note: candidate: ‘void std::vector<_Tp, _Alloc>::push_back(const value_type&) [with _Tp = char; _Alloc = std::allocator; std::vector<_Tp, _Alloc>::value_type = char]’
 1187 |       push_back(const value_type& __x)
      |       ^~~~~~~~~
/usr/include/c++/11/bits/stl_vector.h:1187:35: note:   no known conversion for argument 1 from ‘std::string’ {aka ‘std::__cxx11::basic_string’} to ‘const value_type&’ {aka ‘const char&’}
 1187 |       push_back(const value_type& __x)
      |                 ~~~~~~~~~~~~~~~~~~^~~
/usr/include/c++/11/bits/stl_vector.h:1203:7: note: candidate: ‘void std::vector<_Tp, _Alloc>::push_back(std::vector<_Tp, _Alloc>::value_type&&) [with _Tp = char; _Alloc = std::allocator; std::vector<_Tp, _Alloc>::value_type = char]’
 1203 |       push_back(value_type&& __x)
      |       ^~~~~~~~~
/usr/include/c++/11/bits/stl_vector.h:1203:30: note:   no known conversion for argument 1 from ‘std::string’ {aka ‘std::__cxx11::basic_string’} to ‘std::vector::value_type&&’ {aka ‘char&&’}
 1203 |       push_back(value_type&& __x)
      |                 ~~~~~~~~~~~~~^~~


/******************************************************************************

                              Online C++ Compiler.
               Code, Compile, Run and Debug C++ program online.
Write your code in this editor and press "Run" button to compile and execute it.

*******************************************************************************/

#include <iostream>
#include <vector>
using namespace std;

string temp (int n);

int
main ()
{
  // Write C++ code here
  int n;
  cout << "enter number";
  cin >> n;
  string s3 = temp (n);
  cout << s3;
  return 0;
}

string
temp (int n)
{
    string s;
  vector < char >previous;
  vector < char >current;
  previous.push_back ('1');
  if (n == 1)
    {
      return "1";
    }
  int count = 0;
  char number;
  for (int i = 1; i < n; i++)
    {
      for (int j = 0; j < previous.size()-1; j++)
	{
	  if (j = 1)
	    {
	      number = previous[j];
	      count++;
	    }
	  else if (previous[j] == previous[j - 1])
	    {
	      count++;
	    }
	  else
	    {
	      current.push_back (to_string (count));
	      current.push_back (number);
	      count = 1;
	      number = previous[j];
	    }

	}
	current.push_back (to_string (count));
	      current.push_back (number);
    }
  previous = current;
  current.clear ();
for(int k=0;k<previous.size();k++){
    s+=previous[k];
}
return s;
}
