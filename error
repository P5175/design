typing.html

<!-- <input type="text" id="input"> -->
<div id="paragraph" (keyup)="keyup($event)" tabindex="5" #paragraph>
</div>
<div id="refresh" class="refresh"><button style="font-size: 20px;" (click)="onclick()">refresh</button></div>

typing.css

#paragraph{
    display: flex;
    width:100%;
   flex-wrap: wrap;
   margin:30px;
   outline: none;
}
:host /deep/ #paragraph div{
    font-size: 50px;
    margin-right: 10px;
   
}
:host /deep/.sucess{
    color: greenyellow ;
}
:host /deep/.error{
    color: tomato ;
}
#refresh{
    text-align: center;
    
}

typing.ts

import { AfterViewInit, Component, ElementRef, OnInit, ViewChild } from '@angular/core';
import { ParagraphService } from '../paragraph.service';

@Component({
  selector: 'app-typing',
  templateUrl: './typing.component.html',
  styleUrls: ['./typing.component.css']
})
export class TypingComponent implements AfterViewInit {
  @ViewChild('paragraph') myDiv!: ElementRef ;
  constructor(private paragraphService:ParagraphService){

  }
   divs:number[]=[];
   i:number=0;
   j:number=0;
   wordl:number=0;
   paragraph: String = '';
  ngAfterViewInit(): void {
    this.paragraph = this.paragraphService.data[Math.floor(Math.random() * this.paragraphService.data.length)];
    this.splitParagraph();
    const divElement: HTMLDivElement = this.myDiv.nativeElement;
    const childCount: number = divElement.children.length;
    for(let i=0;i<childCount;i++){
this.divs[i]=divElement.children[i].children.length;
    }
    // console.log(this.divs);
    
  }


  splitParagraph() {
    const divElement: HTMLDivElement = this.myDiv.nativeElement;
    const words: string[] = this.paragraph.split(' ');

    for (let i = 0; i < words.length; i++) {
      const wordDiv = document.createElement('div');
      const word = words[i];

      for (let j = 0; j < word.length; j++) {
        const letterSpan = document.createElement('span');
        letterSpan.textContent = word[j];
        wordDiv.appendChild(letterSpan);
      }

      divElement.appendChild(wordDiv);
    }
  }


  onclick(){
    const divElement: HTMLDivElement = this.myDiv.nativeElement;
    divElement.textContent='';
    this.paragraph = this.paragraphService.data[Math.floor(Math.random() * this.paragraphService.data.length)];
    this.splitParagraph();
     divElement: HTMLDivElement = this.myDiv.nativeElement;
    const childCount: number = divElement.children.length;
    for(let i=0;i<childCount;i++){
this.divs[i]=divElement.children[i].children.length;
    }
    
    
  }


  keyup(e:KeyboardEvent){
    // console.log(e.key);
    const divElement: HTMLDivElement = this.myDiv.nativeElement;
  this.wordl=this.divs[this.i];
  
   
   if(this.wordl!=this.j){
    console.log("first if");
    
    // console.log(this.wordl);
    // console.log(this.j);
    // console.log(e.keyCode);
    
    if(e.key==divElement.children[this.i].children[this.j].textContent){
      console.log("second if");
      
      // console.log(e.key);
      // console.log(divElement.children[this.i].children[this.j].textContent);
      divElement.children[this.i].children[this.j].classList.add('sucess');
    }else if(e.keyCode==8){
      console.log("second else if");
      console.log(this.j);
      
      if(this.j!=0){
this.j--;
divElement.children[this.i].children[this.j].classList.remove('sucess');
divElement.children[this.i].children[this.j].classList.remove('error');
this.j--;}else{
  this.j--;
}
    }
    else{
      console.log("else");
      
      // console.log(e.key);
      // console.log(divElement.children[this.i].children[this.j].textContent);
      divElement.children[this.i].children[this.j].classList.add('error');
    }
this.j++;}
else if(e.keyCode==32){
  // console.log(e.keyCode);
  console.log("first 1 else if");
this.i++;
this.j=0;
// console.log("spacebar");

}else if(e.keyCode==8){
  console.log("first 2 else if");
  
  this.j--;
  divElement.children[this.i].children[this.j].classList.remove('sucess');
  
  
}
else{
  console.log("first else");
  
  // console.log(e.keyCode);
  
  console.log("else");
  
}
    // console.log(j);
    
  }
}
 now when i keyup i want focus with one vertical line like input tag what to do
